initSidebarItems({"enum":[["Error","Error type for tmi-rs methods"]],"mod":[["client_messages","Types to represent messages sent by the client"],["event","Data types and parsing logic for events that can be received from the twitch servers."],["irc","Parser for twitch flavored IRC"],["irc_constants","Constants containing the IRC reply codes"],["rate_limits","Helpers for rate limiting"],["selectors","Convenience methods for matching specific event types. The functions in this module select an `Arc<Event<T>>` with a specific `Event` variant. The returned `SelectorResult` implements `Deref` for the inner type contained in the enum variant."]],"struct":[["TwitchChatConnection","Contains the Streams and Sinks associated with an underlying websocket connection. They can be cloned freely to be shared across different tasks and threads."],["TwitchChatSender","A wrapper around any `Sink<ClientMessage<String>>` that provides methods to send Twitch specific messages or commands to the sink."],["TwitchClient","Represents a twitch chat client/connection. Call `connect` to establish a connection."],["TwitchClientConfig","Holds the configuration for a twitch chat client. Convert it to a `TwitchClient` and call `connect` to establish a connection using it."],["TwitchClientConfigBuilder","Builder for `TwitchClientConfig`."]],"trait":[["StringRef","Trait that is used when generically referring to a &str, String, or other type that can be used like a borrowed string"]],"type":[["ChatReceiver","Receiver channel for all chat events"],["ChatSender","Sender to push messages to Twitch chat"],["ErrorReceiver","Receiver channel for connection and parsing errors"]]});